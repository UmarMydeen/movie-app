{"ast":null,"code":"var _jsxFileName = \"/Users/umarmydeenhabibrahiman/Learning/movie-app/src/Components/MoviesGrid/MoviesGrid.jsx\";\nimport React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchMovieList from '../../actions/fetchMovieList';\nimport MovieCard from '../MovieCard/MovieCard';\nimport { getMovieList, getMovieListDataSource } from '../../Reducers/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MoviesGrid = ({\n  movieList,\n  dataSource\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row row-cols-6 row-cols-md-5\",\n    children: [dataSource.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" No Data Found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 45\n    }, this), dataSource && dataSource.map(movie => /*#__PURE__*/_jsxDEV(MovieCard, {\n      movie: movie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 56\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n};\n\n_c = MoviesGrid;\nMoviesGrid.propTypes = {\n  movieList: PropTypes.array.isRequired,\n  dataSource: PropTypes.array.isRequired\n};\nMoviesGrid.propTypes = {\n  movieList: PropTypes.array.isRequired,\n  dataSource: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    movieList: getMovieList(state),\n    dataSource: getMovieListDataSource(state)\n  };\n};\n\nconst hocChain = compose(connect(mapStateToProps, null));\nexport default _c2 = hocChain(MoviesGrid);\nexport { MoviesGrid as TestableMoviesGrid };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MoviesGrid\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/umarmydeenhabibrahiman/Learning/movie-app/src/Components/MoviesGrid/MoviesGrid.jsx"],"names":["React","compose","connect","PropTypes","fetchMovieList","MovieCard","getMovieList","getMovieListDataSource","MoviesGrid","movieList","dataSource","length","map","movie","propTypes","array","isRequired","mapStateToProps","state","hocChain","TestableMoviesGrid"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SACIC,YADJ,EAEIC,sBAFJ,QAGO,sBAHP;;;AAKA,MAAMC,UAAU,GAAG,CAAC;AAChBC,EAAAA,SADgB;AAEhBC,EAAAA;AAFgB,CAAD,KAGb;AACF,sBACI;AAAK,IAAA,SAAS,EAAC,8BAAf;AAAA,eAEQA,UAAU,CAACC,MAAX,KAAsB,CAAtB,iBAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFpC,EAKQD,UAAU,IAAIA,UAAU,CAACE,GAAX,CAAeC,KAAK,iBAAK,QAAC,SAAD;AAAW,MAAA,KAAK,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA,YAAzB,CALtB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAdD;;KAAML,U;AAgBNA,UAAU,CAACM,SAAX,GAAuB;AACnBL,EAAAA,SAAS,EAAEN,SAAS,CAACY,KAAV,CAAgBC,UADR;AAEnBN,EAAAA,UAAU,EAAEP,SAAS,CAACY,KAAV,CAAgBC;AAFT,CAAvB;AAKAR,UAAU,CAACM,SAAX,GAAuB;AACnBL,EAAAA,SAAS,EAAEN,SAAS,CAACY,KAAV,CAAgBC,UADR;AAEnBN,EAAAA,UAAU,EAAEP,SAAS,CAACY,KAAV,CAAgBC;AAFT,CAAvB;;AAKA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHT,IAAAA,SAAS,EAAEH,YAAY,CAACY,KAAD,CADpB;AAEHR,IAAAA,UAAU,EAAEH,sBAAsB,CAACW,KAAD;AAF/B,GAAP;AAIH,CALD;;AAOA,MAAMC,QAAQ,GAAGlB,OAAO,CACpBC,OAAO,CAACe,eAAD,EAAkB,IAAlB,CADa,CAAxB;AAIA,qBAAeE,QAAQ,CAACX,UAAD,CAAvB;AAEA,SAASA,UAAU,IAAIY,kBAAvB","sourcesContent":["import React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchMovieList from '../../actions/fetchMovieList';\nimport MovieCard from '../MovieCard/MovieCard';\nimport {\n    getMovieList,\n    getMovieListDataSource,\n} from '../../Reducers/index'\n\nconst MoviesGrid = ({\n    movieList,\n    dataSource\n}) => {\n    return (\n        <div className=\"row row-cols-6 row-cols-md-5\">\n            {\n                dataSource.length === 0 && (<p> No Data Found</p>)\n            }\n            {\n                dataSource && dataSource.map(movie => (<MovieCard movie={movie} />))\n            }\n        </div>\n    );\n}\n\nMoviesGrid.propTypes = {\n    movieList: PropTypes.array.isRequired,\n    dataSource: PropTypes.array.isRequired,\n};\n\nMoviesGrid.propTypes = {\n    movieList: PropTypes.array.isRequired,\n    dataSource: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        movieList: getMovieList(state),\n        dataSource: getMovieListDataSource(state),\n    }\n};\n\nconst hocChain = compose(\n    connect(mapStateToProps, null),\n);\n\nexport default hocChain(MoviesGrid);\n\nexport { MoviesGrid as TestableMoviesGrid }"]},"metadata":{},"sourceType":"module"}